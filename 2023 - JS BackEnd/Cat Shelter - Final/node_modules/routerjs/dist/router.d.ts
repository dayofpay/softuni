import { Engine } from './engines/Engine';
export interface RouteError extends Error {
    statusCode?: number;
}
export interface RouteContext {
    /**
     * The current path
     */
    path: string;
    /**
     * Set a value in the context
     */
    set: (key: string, value: unknown) => void;
    [prop: string]: unknown;
}
export interface Request {
    /**
     * Returns anything passed as params, or query string, in this order. Fallback to null or
     * a default value
     */
    get: (k: string, def?: string) => string | null | undefined;
    /**
     * The current path of the request
     */
    path: string;
    /**
     * A object contaning all the definied parameters found when matching the route
     */
    params: {
        [k: string]: string;
    };
    /**
     * Any parameter with no name
     */
    splats: string[];
    /**
     * The query string keys/values
     */
    query: {
        [k: string]: string;
    };
    /**
     * Stop execution of other matching routes
     */
    stop: () => void;
    /**
     * Returns true if the route has been stopped
     */
    isStopped: () => boolean;
}
export declare type RouteCallback = (req: Request, ctx: RouteContext) => void | Promise<void>;
export declare type AlwaysCallback = (ctx: RouteContext) => void | Promise<void>;
export declare type ErrorCallback = (e: Error, context: RouteContext) => void | Promise<void>;
export interface Router {
    /**
     * Add a new route to the router.
     * When the path visited in the browser matches the path definition, the callback is executed
     * @see https://github.com/ramiel/router.js#Usage
     */
    get: (path: string | RegExp, callback: RouteCallback) => Router;
    /**
     * Add an handler that runs when a route is left.
     * @see https://github.com/ramiel/router.js#Exithandlers
     */
    exit: (path: string | RegExp, callback: RouteCallback) => Router;
    /**
     * This callbacks are executed for any path change, even if the request has been stopped.
     * @see https://github.com/ramiel/router.js#Alwayscallbacks
     */
    always: (callback: AlwaysCallback) => Router;
    /**
     * Run the callback when a route produces an error. If the error has
     * a `statusCode` attached, it is matched. To catch any error use "*"
     * @see https://github.com/ramiel/router.js#Errors
     */
    error: (errorCode: number | '*', callback: ErrorCallback) => Router;
    /**
     * Navigate to a different path (like redirect)
     */
    navigate: (path: string) => void;
    /**
     * Navigate to any path but do not execute route handlers
     */
    setLocation: (path: string) => void;
    /**
     * Go to a specific page in the history
     * @param {Number} relative Relative position from the current page which is 0
     */
    go: (n?: number) => void;
    /**
     * Go back in the history
     */
    back: () => void;
    /**
     * GO forward in the history
     */
    forward: () => void;
    /**
     * Start route imediately, without waiting for the first user interaction.
     * If path is passed the browser is taken to that path, otherwise the route handler
     * relative to current path is executed
     */
    run: (path?: string) => Router;
    /**
     * Remove any listener setup by te router
     */
    teardown: () => Router;
    /**
     *Given a path, returns the correct path considering the basePath if any
     */
    buildUrl: (path: string) => string;
    /**
     * Returns the option with which the router has been created
     */
    getOptions: () => Omit<RouterOptions, 'engine'>;
    /**
     * @deprecated
     */
    _getOptions: () => Omit<RouterOptions, 'engine'>;
}
export interface RouterOptions {
    engine?: () => Engine;
    ignoreCase?: boolean;
    basePath?: string;
}
export declare type RouterFactoryType = (options?: RouterOptions) => Router;
declare const createRouter: RouterFactoryType;
export default createRouter;
